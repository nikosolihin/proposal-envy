/**
 * Placeholders
 * ------------------------------------
 */

// Vertical align
// http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css
%vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

// Vertical align parent
%vertical-align-parent {
  transform-style: preserve-3d;
}

// Excerpt style
%excerpt {
  font-family: $serif-font-family;
  font-weight: 400;
  font-size: rem-calc(20);
  line-height: 1.8;
  text-align: left;
}

// Standard stuff for backgrond
%bg {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
}

// Typography
%white {
  color: $white!important;
}
%shadow {
  text-shadow: 1px 1px 0 rgba(0,0,0,.4);
}
%serif {
  color: $tuatara;
  font-family: $serif-font-family;
  font-weight: 400;
  color: $white;
  margin: rem-calc(0 0 0 0);
}
%serif-bold {
  @extend %serif;
  font-weight: 700;
}
%serif-italic {
  @extend %serif;
  font-style: italic;
}
%serif-bold-italic {
  @extend %serif-bold;
  font-style: italic;
}
%sans {
  color: $aluminum;
  font-family: $regular-font-family;
  letter-spacing: rem-calc($global-letter-spacing);
  text-transform: uppercase;
  color: $white;
  margin: rem-calc(0 0 0 0);
}
%sans-bold {
  @extend %sans;
  font-family: $demi-font-family;
  font-size: rem-calc(15);
}

/**
 * Mixins
 * ------------------------------------
 */

// Divider Line
@mixin divider($color: #EBEAE5) {
  border: 0;
  height: rem-calc(2);
  background: $color;
  width: rem-calc(50);
  text-align:center;
  margin: rem-calc(40) auto rem-calc(40);
}

@mixin grid-debug($top) {
  @media #{$small-only} {
    &:before {
      color: white;
     content: 'This is small';
     position: absolute;
     top: $top;
    }
  }
  @media #{$medium-only} {
    &:before {
      color: white;
     content: 'This is medium';
     position: absolute;
     top: $top;
    }
  }
  @media #{$large-only} {
    &:before {
      color: white;
     content: 'This is large';
     position: absolute;
     top: $top;
    }
  }
  @media #{$xlarge-only} {
    &:before {
      color: white;
     content: 'This is xlarge';
     position: absolute;
     top: $top;
    }
  }
}

/*
_______

These simple SCSS/SASS mixins for Foundation 4 are made by me to deal with media-queries and have a clean code at the same time! ;)

****IMPORTANT****

Due to Foundation 4 uses mobile-first methodology, every $phone-"X" variable in these mixins defines the value for every screen size.
$desktop-"X" values overrides $phone-"X" values when the width of the window is 768px and above.

So, to simplify this, we can think that way: ($phone-"X" < 768px => $desktop-"X")

________
*/

/*

** MIXIN 1: RGRID - Responsive Grid **

This mixin provides an easy way to use the Foundation 4 grid classes and media-queries.
$phone-grid: number of grid columns.
$desktop-grid: number of grid columns that overrides $phone-grid for window width 768px and above.
Only one parameter could be declared to define a value for every window width.

i.e.:
@include rgrid(3,6); => 3 columns for phone, 6 columns for desktop.
@inculde rgrid(6); => 6 columns.

*/

@mixin rgrid($phone-grid:"",$desktop-grid:""){
  @extend .small-#{$phone-grid};
  @extend .large-#{$desktop-grid};
  @extend .columns;
}


/*

** MIXIN 2: RFONT - Responsive Font Size **

Define a font-size for both desktop and phone.
If only one parameter is declared, the phone font-size will be automatically defined 30% smaller than the desktop font-size)

i.e.:
@include rfont(24,12); => "font-size:24px" for desktop screens & "font-size:12px" for mobile.
@include rfont(20); => "font-size:20px" for desktop screens & "font-size:14px" for mobile.

*/

@mixin rfont($desktop-font:"", $phone-font:$desktop-font*0.7){
  font-size: #{$phone-font}px;
  @media #{$small}{font-size: #{$desktop-font}px;}
}

/*
** MIXIN 3: PROP - Responsive CSS Property **
*/
@mixin prop($prop, $small-value, $medium-value:false, $large-value:false, $xlarge-value:false){
  #{$prop}: $small-value;
  @if $medium-value {
    @media #{$medium-up} { #{$prop}: $medium-value; }
  }
  // @media #{$large-up}{ #{$prop}: $large-value; }
  // @media #{$xlarge-up}{ #{$prop}: $xlarge-value; }
}